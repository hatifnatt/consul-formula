consul:
  version: 1.4.1
  # Formula will try download distributive from %download_remote%/%version%/consul_%version%_linux_amd64.zip
  # You can put archive with consul on salt-fileserver i.e. /filserver_root/DIST/consul/1.9.0/consul_1.9.0_linux_amd64.zip
  # Than you can specify salt://DIST/consul/ as 'download_remote'
  download_remote: https://releases.hashicorp.com/consul/
  # File with SHA sums will be downloaded from  %source_hash_remote%/%version%/consul_%version%_SHA256SUMS
  source_hash_remote: https://releases.hashicorp.com/consul/
  # Skip checksum verification, by default checksum will be verified.
  # You probably want to disable checksum verification if you download distributive from salt fileserver (salt://...)
  skip_verify: False
  user: consul
  group: consul
  root_user: root
  root_group: root
  bin: /usr/local/bin/consul
  conf_source: consul.json.jinja
  # Don't show diff when updating config file - don't reveal tokens.
  show_changes: False
  # Temp dir for manipulations with archive
  temp_dir: /tmp/consul
  env_file: /etc/default/consul
  # Where to store backups
  backup_dir: /var/lib/consul/backup
  # Install backup helper script or not
  backup_helper: True
  service_name: consul
  # When triggering service after configuration changes use reload instead of restart
  reload: False
  # Install bash completion configuration
  bash_autocomplete: True
  # Start parameters (command line arguments) for consul, consul service will be started with this parameters
  # some parameters have their equivalent in configuration file, it is preferable to put parameters in the config file
  # rather than as command line arguments
  params:
    config-file: /etc/consul.d/consul.json
    pid-file: /run/consul/consul.pid
  tls:
    self_signed: False
    packages:
      - openssl
      - python3-m2crypto
    # If path starts with 'salt://' or '/' value will be used 'as is'
    # file from salt-filserver or local file will be used respectively
    # otherwise file will be searched in 'formula-root/tls/' on salt-fileserver
    key_file_source: tls.key
    cert_file_source: tls.crt
    cert_params:
      days_valid: 3650
      CN: {{ grains.fqdn }}
  config:
    data_dir: /var/lib/consul
    server: False
    # Encryption key encoded with base64. It can be generated with `consul keygen` command or with
    # `dd if=/dev/urandom bs=1 count=16 2>/dev/null | base64`
    # `dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64`
    # Prior version 1.6.0 it was 16 bytes long, since version 1.6.0 it's 32 bytes long
    # https://www.consul.io/docs/agent/encryption.html
    encrypt: pLw1SiufNVHDc/FQD4WQN+phbJiLVgiWA31x8rQbq9c=
    ui_config:
      enabled: True
    log_level: info
    # Consul > 1.0 support go-sockaddr templates for addresses
    # https://godoc.org/github.com/hashicorp/go-sockaddr/template
    # client_addr: {% raw %}"{{ GetPrivateIP }}"{% endraw %}
    # bind_addr: {% raw %}"{{ GetPublicIP }}"{% endraw %}

# Enable HTTPS with self signed certificate
consul:
  tls:
    self_signed: True
    cert_params:
      subjectAltName: DNS:vault.example.com, DNS:another.name.tld
  config:
    ports:
      https: 8501
    # it's mandatory to provide path to key and certificate, otherwise certificate will not be issued
    key_file: /etc/consul.d/tls.key
    cert_file: /etc/consul.d/tls.crt

# Enable HTTPS with provided local (on minion) certificate
consul:
  tls:
    self_signed: False
    key_file_source: /etc/pki/api/consul/myminion.key
    cert_file_source: /etc/pki/api/consul/myminion.crt
  config:
    ports:
      https: 8501
    # it's mandatory to provide path to key and certificate,
    # provided key and cert will be copied to key_file and cert_file respectively
    key_file: /etc/consul.d/tls.key
    cert_file: /etc/consul.d/tls.crt


# Enable and configure ACL
# In example below you can find minimal required policies
# if you want to enable ACL and use Consul as storage for Vault
consul:
  config:
    acl:
      enabled: True
      default_policy: deny
      down_policy: extend-cache
      tokens:
        # Any UUID can be used as master token
        master: uuid-here
        # Agent token required for internal request, even if you run single agent in server mode.
        # But it must be generated by running Consul server itself, so you must run state at least twice
        # first run - get agent token, than paste into consul config in pillar
        # second run - consul reads agent token from config and can operate normally
        agent: uuid-here
  # Create some ACL policies and also set up Anonymous token and Agent token
  policy_bootstrap:
    - name: node-read
      description: Read Nodes
      ensure: create
      rules:
        node_prefix:
          '':
            policy: read
      # same rule in HCL
      # node_prefix "" {
      #   policy = "read"
      # }
    - name: node-write
      description: Write Nodes
      ensure: create
      rules:
        node_prefix:
          '':
            policy: write
    - name: service-read
      description: Read Services
      ensure: create
      rules:
        service_prefix:
          '':
            policy: read
    # Policy for HashiCorp Vault
    # https://www.vaultproject.io/docs/configuration/storage/consul.html#acls
    - name: vault
      description: Vault Policy
      ensure: create
      rules:
        key_prefix:
          vault/:
            policy: write
        node_prefix:
          '':
            policy: write
        service:
          vault:
            policy: write
        agent_prefix:
          '':
            policy: write
        session_prefix:
          '':
            policy: write
  # Set defaults for anonymous token https://www.consul.io/docs/agent/acl-system.html#acl-tokens
  # Allow to read nodes and services
  anonymous_token:
    policies:
      # Those policies must be configured under 'policy_bootstrap' key above.
      - service-read
      - node-read
  # Set defaults for agent token https://www.consul.io/docs/agent/acl-system.html#acl-agent-token
  # Description for this token will be "Salt Created Agent Token"
  agent_token:
    policies:
      # Those policies must be configured under 'policy_bootstrap' key above.
      - service-read
      # Agent token must have node write permision, it can be narrowed down to single node,
      # like 'node "mynode" { policy = "write" }' but than every agent must have personal token
      - node-write
